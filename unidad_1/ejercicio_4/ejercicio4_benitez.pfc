program ProductoEscalar;
const LNG = 9;
const N = 5;
type 
	vector = array [0..LNG] of integer;

var
	i: integer;
	resultado: integer;
	v1, v2, v3: vector;

procedure cargar_vectores;
begin
	{ Generamos dos vectores de 10 elementos con valores aleatorios }
	for i := 0 to LNG do
	begin
		v1[i] := Random(10);
		v2[i] := Random(10); 
	end;

	{ Imprimimos el primer vector }
	write('Vector 1 = [');
	for i := 0 to LNG do
	begin
		if (i <> LNG) then
			begin
				write(v1[i], ', ');
			end
		else
			begin
				write(v1[i], ']');
			end;
	end;

	writeln;

	{ Imprimimos el segundo vector }
	write('Vector 2 = [');
	for i := 0 to LNG do
	begin
		if (i <> LNG) then
			begin
				write(v2[i], ', ');
			end
		else
			begin
				write(v2[i], ']');
			end;
	end;

	writeln; writeln;
end;

process type PRODUCTO(rango: integer; var s: semaphore);
var
	inicio, fin, j, local: integer;

begin
	inicio  := rango * N;
	fin := (rango * N + N) - 1;

	for j := inicio  to fin do
	begin	
		local := v1[j] * v2[j];
		wait(s);
		resultado := resultado + local;
		v3[j] := local;
		writeln('El proceso ', rango, ' calcula en j = ', j, ' el producto (', v1[j], ' * ', v2[j], ') = ', local);
		signal(s);
	end;
end;

var
  p1, p2: PRODUCTO;
  sem: semaphore; 

begin
	initial(sem, 1);
	resultado := 0;
	cargar_vectores;

	cobegin
		p1(0, sem);
		p2(1, sem);
	coend;

	writeln;

	{ Imprimimos el resultado de una forma entendible }
	write('Resultado = ');

	for i := 0 to LNG do
	begin
		if (i <> LNG) then
			begin
				write(v3[i], ' + ');
			end
		else
			begin
				write(v3[i], ' = ', resultado);
			end;
	end;

end.
